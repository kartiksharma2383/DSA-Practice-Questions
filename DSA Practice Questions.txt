DSA practice questions:1. Array:Easy:  * [Find the Largest Element in an Array](https://www.geeksforgeeks.org/find-the-largest-element-in-an-array/)  * [Reverse an Array](https://www.geeksforgeeks.org/reverse-an-array-in-java/)  * [Find the Missing Number](https://www.geeksforgeeks.org/find-the-missing-number/)  * [Rotate an Array](https://www.geeksforgeeks.org/array-rotation/)  * [Find the Equilibrium Index](https://www.geeksforgeeks.org/equilibrium-index-of-an-array/)Intermediate:  * [Maximum Subarray Sum (Kadane’s Algorithm)](https://www.geeksforgeeks.org/maximum-subarray-sum/)  * [Find Subarray with Given Sum](https://www.geeksforgeeks.org/find-subarray-with-given-sum/)  * [Move All Zeros to End](https://www.geeksforgeeks.org/move-all-zeroes-to-end-of-array/)  * [Find All Pairs in an Array that Sum to a Specific Target](https://www.geeksforgeeks.org/find-all-pairs-in-an-array-that-sum-to-a-   specific-target/)  * [Stock Buy and Sell – Multiple Transactions](https://www.geeksforgeeks.org/stock-buy-and-sell-multiple-transactions/)Hard:  * [Maximum Circular Subarray Sum](https://www.geeksforgeeks.org/maximum-circular-subarray-sum/)  * [Find Subarray with Given Sum](https://www.geeksforgeeks.org/find-subarray-with-given-sum/)  * [Equilibrium Index of an Array](https://www.geeksforgeeks.org/equilibrium-index-of-an-array/)  * [Maximum Sum Increasing Subsequence](https://www.geeksforgeeks.org/maximum-sum-increasing-subsequence/)  * [K-Concatenation](https://www.geeksforgeeks.org/k-concatenation/)2. Stack:Easy:  * [Parenthesis Checker](https://www.geeksforgeeks.org/parenthesis-checker/)  * [Reverse a String using Stack](https://www.geeksforgeeks.org/reverse-a-string-using-stack/)  * [Postfix to Prefix](https://www.geeksforgeeks.org/convert-infix-expression-to-prefix-expression/)  * [Two Stacks in an Array](https://www.geeksforgeeks.org/implement-two-stacks-in-an-array/)  * [Delete Middle Element from Stack](https://www.geeksforgeeks.org/delete-middle-element-of-a-stack/)Intermediate:  * [Next Greater Element](https://www.geeksforgeeks.org/next-greater-element/)  * [Daily Temperatures](https://www.geeksforgeeks.org/daily-temperatures/)  * [Trapping Rainwater](https://www.geeksforgeeks.org/trapping-rain-water/)  * [Largest Rectangle in Histogram](https://www.geeksforgeeks.org/largest-rectangle-under-histogram/)  * [Evaluate Postfix Expression](https://www.geeksforgeeks.org/stack-set-4-evaluation-of-postfix-expression/)Hard:  * [Largest Rectangle in Histogram](https://www.geeksforgeeks.org/largest-rectangle-under-histogram/)  * [Trapping Rainwater](https://www.geeksforgeeks.org/trapping-rain-water/)  * [Evaluate Postfix Expression](https://www.geeksforgeeks.org/stack-set-4-evaluation-of-postfix-expression/)  * [Implement Stack using Queues](https://www.geeksforgeeks.org/implement-stack-using-queues/)  * [Implement Queue using Stacks](https://www.geeksforgeeks.org/implement-queue-using-stacks/)3. Queue:Easy:  * [Implement Queue using Stacks](https://www.geeksforgeeks.org/implement-queue-using-stacks/)  * [Implement Stack using Queues](https://www.geeksforgeeks.org/implement-stack-using-queues/)  * [Reverse First K Elements of Queue](https://www.geeksforgeeks.org/reverse-first-k-elements-of-queue/)  * [Queue using Two Stacks](https://www.geeksforgeeks.org/queue-using-two-stacks/)  * [Circular Queue Implementation](https://www.geeksforgeeks.org/circular-queue-set-1-introduction-array-implementation/)Intermediate:  * [Queue Reversal](https://www.geeksforgeeks.org/queue-reversal/)  * [Queue using Two Stacks](https://www.geeksforgeeks.org/queue-using-two-stacks/)  * [Implement Stack using Queues](https://www.geeksforgeeks.org/implement-stack-using-queues/)  * [Implement Queue using Stacks](https://www.geeksforgeeks.org/implement-queue-using-stacks/)  * [Reverse First K Elements of Queue](https://www.geeksforgeeks.org/reverse-first-k-elements-of-queue/)Hard:  * [Circular Queue Implementation](https://www.geeksforgeeks.org/circular-queue-set-1-introduction-array-implementation/)  * [Implement Stack using Queues](https://www.geeksforgeeks.org/implement-stack-using-queues/)  * [Implement Queue using Stacks](https://www.geeksforgeeks.org/implement-queue-using-stacks/)  * [Queue Reversal](https://www.geeksforgeeks.org/queue-reversal/)  * [Queue using Two Stacks](https://www.geeksforgeeks.org/queue-using-two-stacks/)4. String:Easy:  * [Reverse a String](https://www.geeksforgeeks.org/reverse-a-string/)  * [Check if a String is Palindrome](https://www.geeksforgeeks.org/check-if-a-string-is-palindrome/)  * [Count Vowels and Consonants](https://www.geeksforgeeks.org/count-vowels-and-consonants-in-a-string/)  * [Remove All Occurrences of a Character](https://www.geeksforgeeks.org/remove-all-occurrences-of-a-character-from-string/)  * [Check for Anagram](https://www.geeksforgeeks.org/check-whether-two-strings-are-anagram-of-each-other/)Intermediate:  * [Longest Substring Without Repeating Characters](https://www.geeksforgeeks.org/longest-substring-without-repeating-characters/)  * [Find All Anagrams in a String](https://www.geeksforgeeks.org/find-all-anagrams-in-a-string/)  * [Count and Say](https://www.geeksforgeeks.org/count-and-say/)  * [Implement strstr()](https://www.geeksforgeeks.org/implement-strstr/)  * [Check if a String is Rotation of Another](https://www.geeksforgeeks.org/check-if-a-string-is-rotation-of-another/)Hard:  * [Longest Palindromic Substring](https://www.geeksforgeeks.org/longest-palindromic-substring/)  * [String Matching Algorithms](https://www.geeksforgeeks.org/string-matching-algorithms/)  * [Regular Expression Matching](https://www.geeksforgeeks.org/regular-expression-matching/)  * [Wildcard Matching](https://www.geeksforgeeks.org/wildcard-matching/)  * [Edit Distance](https://www.geeksforgeeks.org/edit-distance-dp-5/)5. Hashmap:Easy:  * [Two Sum Problem](https://www.geeksforgeeks.org/two-sum-problem/)  * [Find All Pairs in an Array that Sum to a Specific Target](https://www.geeksforgeeks.org/find-all-pairs-in-an-array-that-sum-to-a-specific-target/)  * [Count Frequencies of Elements in an Array](https://www.geeksforgeeks.org/count-frequencies-of-elements-in-an-array/)  * [Find the Intersection of Two Arrays](https://www.geeksforgeeks.org/find-the-intersection-of-two-arrays/)  * [Check if Two Strings are Anagram](https://www.geeksforgeeks.org/check-whether-two-strings-are-anagram-of-each-other/)Intermediate:  * [Subarray Sum Equals K](https://www.geeksforgeeks.org/subarray-sum-equals-k/)  * [Longest Substring Without Repeating Characters](https://www.geeksforgeeks.org/longest-substring-without-repeating-characters/)  * [Group Anagrams](https://www.geeksforgeeks.org/group-anagrams/)  * [Find All Anagrams in a String](https://www.geeksforgeeks.org/find-all-anagrams-in-a-string/)  * [Top K Frequent Elements](https://www.geeksforgeeks.org/top-k-frequent-elements/)Hard:  * [Longest Substring Without Repeating Characters](https://www.geeksforgeeks.org/longest-substring-without-repeating-characters/)  * [Subarray Sum Equals K](https://www.geeksforgeeks.org/subarray-sum-equals-k/)  * [Group Anagrams](https://www.geeksforgeeks.org/group-anagrams/)  * [Find All Anagrams in a String](https://www.geeksforgeeks.org/find-all-anagrams-in-a-string/)  * [Top K Frequent Elements](https://www.geeksforgeeks.org/top-k-frequent-elements/)6. Set:Easy:  * [Check if a Set Contains a Specific Element](https://www.geeksforgeeks.org/check-if-a-set-contains-a-specific-element/)  * [Add Elements to a Set](https://www.geeksforgeeks.org/add-elements-to-a-set/)  * [Remove Elements from a Set](https://www.geeksforgeeks.org/remove-elements-from-a-set/)  * [Iterate Through a Set](https://www.geeksforgeeks.org/iterate-through-a-set/)  * [Set Operations](https://www.geeksforgeeks.org/set-operations/)Intermediate:  * [Union of Two Sets](https://www.geeksforgeeks.org/union-and-intersection-of-two-linked-lists/)  * [Intersection of Two Sets](https://www.geeksforgeeks.org/union-and-intersection-of-two-linked-lists/)  * [Find Missing Elements Between Two Sets](https://www.geeksforgeeks.org/find-missing-elements-between-two-arrays/)  * [Check Subset](https://www.geeksforgeeks.org/check-if-an-array-is-subset-of-another-array/)  * [Count Distinct Elements in Array](https://www.geeksforgeeks.org/count-distinct-elements-in-an-array/)Hard:  * [Longest Consecutive Sequence](https://www.geeksforgeeks.org/longest-consecutive-subsequence/)  * [Subarray with Distinct Elements](https://www.geeksforgeeks.org/longest-subarray-with-distinct-elements/)  * [Find All Pairs with Given Difference](https://www.geeksforgeeks.org/find-pairs-array-whose-sum-divisible-k/)  * [Maximum of All Subarrays of Size K](https://www.geeksforgeeks.org/sliding-window-maximum-maximum-of-all-subarrays-of-size-k/)  * [Count Distinct Elements in Window of Size K](https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/)7. Sorting:Easy:  * [Implement Bubble Sort](https://www.geeksforgeeks.org/bubble-sort/)  * [Implement Selection Sort](https://www.geeksforgeeks.org/selection-sort/)  * [Implement Insertion Sort](https://www.geeksforgeeks.org/insertion-sort/)  * [Sort 0s, 1s, 2s (Dutch National Flag Problem)](https://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/)  * [Kth Largest Element](https://www.geeksforgeeks.org/kth-largest-element-in-an-array/)Intermediate:  * [Merge Sort](https://www.geeksforgeeks.org/merge-sort/)  * [Quick Sort](https://www.geeksforgeeks.org/quick-sort/)  * [Heap Sort](https://www.geeksforgeeks.org/heap-sort/)  * [Sort Characters By Frequency](https://leetcode.com/problems/sort-characters-by-frequency/)  * [Minimum Number of Platforms Required](https://www.geeksforgeeks.org/minimum-number-platforms-required-railwaybus-station/)Hard:  * [Count Inversions](https://www.geeksforgeeks.org/counting-inversions/)  * [Merge Intervals](https://www.geeksforgeeks.org/merge-intervals/)  * [Largest Number from Array Elements](https://www.geeksforgeeks.org/form-largest-number-from-given-sequence-of-numbers/)  * [Maximize Sum of Array After K Negations](https://leetcode.com/problems/maximize-sum-of-array-after-k-negations/)  * [Minimum Swaps to Sort](https://www.geeksforgeeks.org/minimum-number-swaps-required-sort-array/)8. Searching:Easy:  * [Linear Search](https://www.geeksforgeeks.org/linear-search/)  * [Binary Search](https://www.geeksforgeeks.org/binary-search/)  * [Find First and Last Occurrence in Sorted Array](https://www.geeksforgeeks.org/find-first-and-last-occurrence-of-an-element-in-a-sorted-array/)  * [Search Insert Position](https://leetcode.com/problems/search-insert-position/)  * [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/)Intermediate:  * [Square Root Using Binary Search](https://www.geeksforgeeks.org/square-root-of-an-integer/)  * [Count Occurrences of a Number in a Sorted Array](https://www.geeksforgeeks.org/count-occurrences-of-an-element-in-a-sorted-array/)  * [Find Peak Element](https://leetcode.com/problems/find-peak-element/)  * [Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array/)  * [Find First Bad Version](https://leetcode.com/problems/first-bad-version/)Hard:  * [Median of Two Sorted Arrays](https://leetcode.com/problems/median-of-two-sorted-arrays/)  * [Aggressive Cows / Max Min Distance](https://www.geeksforgeeks.org/aggressive-cows-problem/)  * [Kth Smallest Element in a Sorted Matrix](https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/)  * [Search in a 2D Matrix](https://leetcode.com/problems/search-a-2d-matrix/)  * [Allocate Minimum Number of Pages](https://www.geeksforgeeks.org/allocate-minimum-number-pages/)9. Linked List:Easy:  * [Reverse a Linked List](https://www.geeksforgeeks.org/reverse-a-linked-list/)  * [Detect Loop in Linked List](https://www.geeksforgeeks.org/detect-loop-in-a-linked-list/)  * [Find Middle Element of Linked List](https://www.geeksforgeeks.org/function-to-get-nth-node-of-a-linked-list/)  * [Remove Duplicates from Sorted Linked List](https://www.geeksforgeeks.org/remove-duplicates-from-a-sorted-linked-list/)  * [Merge Two Sorted Linked Lists](https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/)Intermediate:  * [Remove Nth Node from End](https://leetcode.com/problems/remove-nth-node-from-end-of-list/)  * [Detect and Remove Loop](https://www.geeksforgeeks.org/detect-and-remove-loop-in-a-linked-list/)  * [Add Two Numbers Represented by Linked Lists](https://leetcode.com/problems/add-two-numbers/)  * [Intersection Point in Y Shaped Linked Lists](https://www.geeksforgeeks.org/find-intersection-point-of-two-linked-lists/)  * [Reverse a Linked List in Groups of Given Size](https://www.geeksforgeeks.org/reverse-a-linked-list-in-groups-of-given-size/)Hard:  * [Flatten a Multilevel Linked List](https://www.geeksforgeeks.org/flatten-a-linked-list-with-next-and-child-pointers/)  * [Clone a Linked List with Random Pointers](https://www.geeksforgeeks.org/clone-linked-list-random-pointers/)  * [LRU Cache Implementation](https://leetcode.com/problems/lru-cache/)  * [Reverse Alternate K Nodes](https://www.geeksforgeeks.org/reverse-alternate-k-nodes/)  * [Merge K Sorted Linked Lists](https://leetcode.com/problems/merge-k-sorted-lists/)